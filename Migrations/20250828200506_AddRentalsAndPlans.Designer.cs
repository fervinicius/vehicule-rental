// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rental_challenge.Data;

#nullable disable

namespace rental_challenge.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20250828200506_AddRentalsAndPlans")]
    partial class AddRentalsAndPlans
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("rental_challenge.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CnhImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<int>("CnhType")
                        .HasColumnType("integer");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CnhNumber")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("drivers");
                });

            modelBuilder.Entity("rental_challenge.Models.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.ToTable("motorcycles");
                });

            modelBuilder.Entity("rental_challenge.Models.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PredictedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RentalPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("rentals");
                });

            modelBuilder.Entity("rental_challenge.Models.RentalPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DailyCost")
                        .HasColumnType("numeric");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rentalPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f81b1a72-91f3-4e67-a72a-c2a4f0b2f3a6"),
                            DailyCost = 30.00m,
                            DurationInDays = 7
                        },
                        new
                        {
                            Id = new Guid("b1a3c7c2-8e4d-4e9f-8d9e-3e2b1a0f8c7d"),
                            DailyCost = 28.00m,
                            DurationInDays = 15
                        },
                        new
                        {
                            Id = new Guid("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"),
                            DailyCost = 22.00m,
                            DurationInDays = 30
                        },
                        new
                        {
                            Id = new Guid("1c3e4567-e89b-12d3-a456-426614174000"),
                            DailyCost = 20.00m,
                            DurationInDays = 45
                        },
                        new
                        {
                            Id = new Guid("2d4f5678-e89b-12d3-a456-426614174001"),
                            DailyCost = 18.00m,
                            DurationInDays = 50
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
